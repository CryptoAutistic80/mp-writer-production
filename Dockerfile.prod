# syntax=docker/dockerfile:1

FROM node:20-alpine AS base
RUN apk add --no-cache libc6-compat
WORKDIR /workspace
ENV NEXT_TELEMETRY_DISABLED=1

# Install workspace dependencies once
COPY package.json package-lock.json ./
RUN npm install --legacy-peer-deps

# Copy the monorepo
COPY . .

# Build pruned backend bundle
FROM base AS backend-build
RUN npx nx run backend-api:prune

# Build optimized Next frontend
FROM base AS frontend-build
RUN npx nx build frontend --configuration=production

# Production backend image
FROM node:20-alpine AS backend-runtime
RUN apk add --no-cache libc6-compat
WORKDIR /app
ENV NODE_ENV=production \
    PORT=4000

COPY --from=backend-build /workspace/dist/backend-api ./
RUN npm install --omit=dev --legacy-peer-deps
EXPOSE 4000
CMD ["node", "main.js"]

# Production frontend image
FROM node:20-alpine AS frontend-runtime
RUN apk add --no-cache libc6-compat
WORKDIR /app
ENV NODE_ENV=production \
    PORT=3000 \
    NEXT_TELEMETRY_DISABLED=1

COPY --from=frontend-build /workspace/package.json ./package.json
COPY --from=frontend-build /workspace/package-lock.json ./package-lock.json
COPY --from=frontend-build /workspace/node_modules ./node_modules
COPY --from=frontend-build /workspace/frontend ./frontend
RUN rm -rf ./frontend/node_modules
WORKDIR /app/frontend
EXPOSE 3000
CMD ["npx", "next", "start", "--hostname", "0.0.0.0", "--port", "3000"]
